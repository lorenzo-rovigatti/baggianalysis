/*
 * LAMMPSDataFileExporter.cpp
 *
 *  Created on: Mar 1, 2020
 *      Author: lorenzo
 */

#include "LAMMPSDataFileExporter.h"

#include "../topology/Topology.h"
#include "../utils/strings.h"

#include <fstream>

namespace ba {

LAMMPSDataFileExporter::LAMMPSDataFileExporter(std::string atom_style, std::string basename) :
				_atom_style(atom_style),
				_basename(basename) {

}

LAMMPSDataFileExporter::~LAMMPSDataFileExporter() {

}

void LAMMPSDataFileExporter::write(std::shared_ptr<System> system, std::string suffix) {
	auto types = system->types();
	// sorting and removal is faster than other options (see https://stackoverflow.com/a/56034014/5140209)
	// TODO run some performance tests
	std::sort(types.begin(), types.end());
	types.erase(std::unique(types.begin(), types.end()), types.end());

	Topology topology(system);
	topology.apply(system);
	uint N_bonds = topology.bonds().size();

	std::string filename = _basename + suffix;
	std::ofstream output_file(filename);

	output_file << "Generated by baggianalysis" << std::endl << std::endl;

	output_file << boost::format("%d atoms") % system->N() << std::endl;
	output_file << boost::format("%d bonds") % N_bonds << std::endl;
	output_file << boost::format("%d atom types") % types.size() << std::endl;
	output_file << boost::format("1 bond types") << std::endl;

	output_file << std::endl;

	// print the box
	auto box_low = -system->box / 2.;
	auto box_high = box_low + system->box;
	output_file << boost::format("%lf %lf xlo xhi") % box_low[0] % box_high[0] << std::endl;
	output_file << boost::format("%lf %lf ylo yhi") % box_low[1] % box_high[1] << std::endl;
	output_file << boost::format("%lf %lf zlo zhi") % box_low[2] % box_high[2] << std::endl;

	output_file << std::endl;
	output_file << "Masses" << std::endl << std::endl;

	for(auto type : types) {
		output_file << boost::format("%s 1 mass") % type << std::endl;
	}

	output_file << std::endl;
	output_file << "Atoms" << std::endl << std::endl;

	for(auto p : system->particles()) {
		output_file << _particle_line(p) << std::endl;
	}

	output_file << std::endl;
	output_file << "Bonds" << std::endl << std::endl;

	// LAMMPS's ids start from 1
	uint i = 1;
	for(auto b : topology.bonds()) {
		output_file << boost::format("%d %d %d %d") % i % 1 % b[0] % b[1] << std::endl;
		i++;
	}

	output_file.close();
}

std::string LAMMPSDataFileExporter::_particle_line(std::shared_ptr<Particle> p) {
	int p_id = p->index();
	particle_type p_type = p->type();
	if(_atom_style == "bond") {
		int mol_id = ba::utils::lexical_cast<int>(ba::utils::split(p->molecule()->name(), "_")[1]) + 1;
		return boost::str(boost::format("%d %d %s %lf %lf %lf") % p_id % mol_id % p_type % p->position()[0] % p->position()[1] % p->position()[2]);
	}
	else if(_atom_style == "atomic") {
		return boost::str(boost::format("%d %s %lf %lf %lf") % p_id % p_type % p->position()[0] % p->position()[1] % p->position()[2]);
	}
	else {
		std::string error = boost::str(boost::format("Exporting LAMMPS atom_style '%s' is not supported") % _atom_style);
		throw std::runtime_error(error);
	}
}

#ifdef PYTHON_BINDINGS

void export_LAMMPSDataFileExporter(py::module &m) {
	py::class_<LAMMPSDataFileExporter, BaseExporter, std::shared_ptr<LAMMPSDataFileExporter>> exporter(m, "LAMMPSDataFileExporter", R"pbdoc(
		 Export configurations to the LAMMPS data file format. 
	)pbdoc");

	exporter.def(py::init<std::string, std::string>(), R"pbdoc(
		 Constructor. 
	)pbdoc");
}

#endif

} /* namespace ba */
